-------------------------------------------------------------------------------------------------------------------
@cplaster 2023-05-09 20:36
The current Digital simulation was not updated to use the full 16-bit PC and PM, this has been fixed, per
build 2.dig

Added the Assembler.cs file, which takes the Program object generated by the AssemblyParser, 
and generates the actual machine code hex values. 
Assembler.PrintIl generates a string that prints each address and the 16-bit value in that location (little-endian)
Assembler.PrintHex generates a string the prints out the program in Digital's raw2.0 format (also little-endian);
Still need to add Assembler.PrintBin which will just return a little-endian byte array.


-------------------------------------------------------------------------------------------------------------------
@cplaster 2023-05-02 20:00
This project is a fork & port of Fabian's python assembler code per episode #23, with some changes.

Notably, the parser supports label definitions. The Assembler will be able to take AssemblyParser.Program
and organize all the addressing (including labels). That would be the next step.

The problem with labels is that we can no longer do a jabsi (Jump absolute from immediate) at all, and even if 
we could, the immediate could only be 8 bits. This is also a constraint of the jumps we do still have, with the
exclusion of jabsr which uses a 16-bit value stored in a register pair.